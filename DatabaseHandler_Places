import android.content.ContentValues;  
import android.content.Context;  
import android.database.Cursor;  
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;  
import java.util.ArrayList;  
import java.util.List;  

public class DatabaseHandler_Places  extends SQLiteOpenHelper {
	private static final int DATABASE_VERSION = 1;  
  private static final String DATABASE_NAME = "wonderdeveloper";  
  private static final String TABLE_Places = "Places";  
  private static final String KEY_ID =   "ID";  
  private static final String KEY_name =   "name "; 
  private static final String KEY_name =   "phone ";
  private static final String KEY_Address =   "Address";  
  private static final String KEY_longitude =   "longitude";  
  private static final String KEY_Latitude =   "Latitude";  
  public DatabaseHandler_Places(Context context) {
		 super(context, DATABASE_NAME, null, DATABASE_VERSION);  
		// TODO Auto-generated constructor stub
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// TODO Auto-generated method stub
		String CREATE_CONTACTS_TABLE = "CREATE TABLE " + TABLE_Places + "("
				+ KEY_ID + " INTEGER PRIMARY KEY," 	+KEY_name + " NVARCHAR(255), "
        +KEY_phone + " NVARCHAR(255), " 
        	+KEY_Adress + " NVARCHAR(255), " 
						+KEY_longitude + " NVARCHAR(255), " 
						+KEY_Latitude + " NVARCHAR(255),+ ")";
		db.execSQL(CREATE_CONTACTS_TABLE);
	}
  
  @Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub
		db.execSQL("DROP TABLE IF EXISTS " + TABLE_Places);
	      onCreate(db);
	}
	
//	  // code to get the single contact  
	Database_Places getContact(int id) {  
       SQLiteDatabase db = this.getReadableDatabase();  

        Cursor cursor = db.query(TABLE_Places, new String[] { KEY_ID,  
    KEY_name,
    KEY_phone,
    KEY_Adress,
        		KEY_longitude,  }, KEY_ID + "=?",  
               new String[] { String.valueOf(id) }, null, null, null, null);  
 
        		if (cursor != null)  
           cursor.moveToFirst();  
  
       Database_Places contact = new Database_Places(Integer.parseInt(cursor.getString(0)),  
               cursor.getString(1), cursor.getString(2), cursor.getString(3), cursor.getString(4), cursor.getString(5)
              );  
//        // return contact  
        return contact;  
   }  
//  
	// code to add the new contact  
    void addContact(Database_Places contact) {  
        SQLiteDatabase db = this.getWritableDatabase();  
  
        ContentValues values = new ContentValues();  

  
        values.put(KEY_name,contact.getname() ); 
        values.put(KEY_Phone,contact.getPlace()); 
        
       
        values.put(KEY_Address,contact.getAdress()); 
        values.put(KEY_longitude,contact.getlongitude()); 
        values.put(KEY_Latitude,contact.getLatitude()); 
      
        // Inserting Row  
        db.insert(TABLE_Places, null, values);  
        //2nd argument is String containing nullColumnHack  
        db.close(); // Closing database connection  
    }  
    
    // code to get all contacts in a list view  
    public List<Database_Places> getAllContacts() {  
        List<Database_Places> contactList = new ArrayList<Database_Places>();  
        // Select All Query  
        String selectQuery = "SELECT  name,phone,Address,longitude,Latitude FROM " + TABLE_Places;  
  
        SQLiteDatabase db = this.getWritableDatabase();  
        Cursor cursor = db.rawQuery(selectQuery, null);  
  
        // looping through all rows and adding to list  
        if (cursor.moveToFirst()) {  
            do {  
            	Database_Places contact = new Database_Places();  
              
                contact.setname(cursor.getString(0));
                contact.setphone(cursor.getString(1));
                  contact.setAdress(cursor.getString(2));
                contact.setlongitude(cursor.getString(3));
                contact.setLatitude(cursor.getString(4));
         
                
                // Adding contact to list  
                contactList.add(contact);  
            } while (cursor.moveToNext());  
        }  
  
        // return contact list  
        return contactList;  
    }  

        		
